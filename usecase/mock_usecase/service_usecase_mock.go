// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/service_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	helper "github.com/andikabahari/eoplatform/helper"
	model "github.com/andikabahari/eoplatform/model"
	request "github.com/andikabahari/eoplatform/request"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockServiceUsecase is a mock of ServiceUsecase interface.
type MockServiceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockServiceUsecaseMockRecorder
}

// MockServiceUsecaseMockRecorder is the mock recorder for MockServiceUsecase.
type MockServiceUsecaseMockRecorder struct {
	mock *MockServiceUsecase
}

// NewMockServiceUsecase creates a new mock instance.
func NewMockServiceUsecase(ctrl *gomock.Controller) *MockServiceUsecase {
	mock := &MockServiceUsecase{ctrl: ctrl}
	mock.recorder = &MockServiceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceUsecase) EXPECT() *MockServiceUsecaseMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockServiceUsecase) CreateService(claims *helper.JWTCustomClaims, service *model.Service, req *request.CreateServiceRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateService", claims, service, req)
}

// CreateService indicates an expected call of CreateService.
func (mr *MockServiceUsecaseMockRecorder) CreateService(claims, service, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockServiceUsecase)(nil).CreateService), claims, service, req)
}

// DeleteService mocks base method.
func (m *MockServiceUsecase) DeleteService(ctx echo.Context, service *model.Service) helper.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", ctx, service)
	ret0, _ := ret[0].(helper.APIError)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockServiceUsecaseMockRecorder) DeleteService(ctx, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockServiceUsecase)(nil).DeleteService), ctx, service)
}

// FindService mocks base method.
func (m *MockServiceUsecase) FindService(service *model.Service, id string) helper.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindService", service, id)
	ret0, _ := ret[0].(helper.APIError)
	return ret0
}

// FindService indicates an expected call of FindService.
func (mr *MockServiceUsecaseMockRecorder) FindService(service, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindService", reflect.TypeOf((*MockServiceUsecase)(nil).FindService), service, id)
}

// GetServices mocks base method.
func (m *MockServiceUsecase) GetServices(services *[]model.Service, keyword string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetServices", services, keyword)
}

// GetServices indicates an expected call of GetServices.
func (mr *MockServiceUsecaseMockRecorder) GetServices(services, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServices", reflect.TypeOf((*MockServiceUsecase)(nil).GetServices), services, keyword)
}

// UpdateService mocks base method.
func (m *MockServiceUsecase) UpdateService(ctx echo.Context, service *model.Service, req *request.UpdateServiceRequest) helper.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", ctx, service, req)
	ret0, _ := ret[0].(helper.APIError)
	return ret0
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockServiceUsecaseMockRecorder) UpdateService(ctx, service, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockServiceUsecase)(nil).UpdateService), ctx, service, req)
}
