// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/bank_account_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	helper "github.com/andikabahari/eoplatform/helper"
	model "github.com/andikabahari/eoplatform/model"
	request "github.com/andikabahari/eoplatform/request"
	gomock "github.com/golang/mock/gomock"
)

// MockBankAccountUsecase is a mock of BankAccountUsecase interface.
type MockBankAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountUsecaseMockRecorder
}

// MockBankAccountUsecaseMockRecorder is the mock recorder for MockBankAccountUsecase.
type MockBankAccountUsecaseMockRecorder struct {
	mock *MockBankAccountUsecase
}

// NewMockBankAccountUsecase creates a new mock instance.
func NewMockBankAccountUsecase(ctrl *gomock.Controller) *MockBankAccountUsecase {
	mock := &MockBankAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockBankAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccountUsecase) EXPECT() *MockBankAccountUsecaseMockRecorder {
	return m.recorder
}

// CreateBankAccount mocks base method.
func (m *MockBankAccountUsecase) CreateBankAccount(claims *helper.JWTCustomClaims, bankAccount *model.BankAccount, req *request.CreateBankAccountRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateBankAccount", claims, bankAccount, req)
}

// CreateBankAccount indicates an expected call of CreateBankAccount.
func (mr *MockBankAccountUsecaseMockRecorder) CreateBankAccount(claims, bankAccount, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankAccount", reflect.TypeOf((*MockBankAccountUsecase)(nil).CreateBankAccount), claims, bankAccount, req)
}

// GetBankAccount mocks base method.
func (m *MockBankAccountUsecase) GetBankAccount(claims *helper.JWTCustomClaims, bankAccount *model.BankAccount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBankAccount", claims, bankAccount)
}

// GetBankAccount indicates an expected call of GetBankAccount.
func (mr *MockBankAccountUsecaseMockRecorder) GetBankAccount(claims, bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccount", reflect.TypeOf((*MockBankAccountUsecase)(nil).GetBankAccount), claims, bankAccount)
}

// UpdateBankAccount mocks base method.
func (m *MockBankAccountUsecase) UpdateBankAccount(claims *helper.JWTCustomClaims, bankAccount *model.BankAccount, req *request.UpdateBankAccountRequest) helper.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBankAccount", claims, bankAccount, req)
	ret0, _ := ret[0].(helper.APIError)
	return ret0
}

// UpdateBankAccount indicates an expected call of UpdateBankAccount.
func (mr *MockBankAccountUsecaseMockRecorder) UpdateBankAccount(claims, bankAccount, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankAccount", reflect.TypeOf((*MockBankAccountUsecase)(nil).UpdateBankAccount), claims, bankAccount, req)
}
