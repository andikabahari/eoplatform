// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/bank_account_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/andikabahari/eoplatform/model"
	request "github.com/andikabahari/eoplatform/request"
	gomock "github.com/golang/mock/gomock"
)

// MockBankAccountRepository is a mock of BankAccountRepository interface.
type MockBankAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountRepositoryMockRecorder
}

// MockBankAccountRepositoryMockRecorder is the mock recorder for MockBankAccountRepository.
type MockBankAccountRepositoryMockRecorder struct {
	mock *MockBankAccountRepository
}

// NewMockBankAccountRepository creates a new mock instance.
func NewMockBankAccountRepository(ctrl *gomock.Controller) *MockBankAccountRepository {
	mock := &MockBankAccountRepository{ctrl: ctrl}
	mock.recorder = &MockBankAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccountRepository) EXPECT() *MockBankAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBankAccountRepository) Create(bankAccount *model.BankAccount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", bankAccount)
}

// Create indicates an expected call of Create.
func (mr *MockBankAccountRepositoryMockRecorder) Create(bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBankAccountRepository)(nil).Create), bankAccount)
}

// Delete mocks base method.
func (m *MockBankAccountRepository) Delete(bankAccount *model.BankAccount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", bankAccount)
}

// Delete indicates an expected call of Delete.
func (mr *MockBankAccountRepositoryMockRecorder) Delete(bankAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBankAccountRepository)(nil).Delete), bankAccount)
}

// Find mocks base method.
func (m *MockBankAccountRepository) Find(bankAccount *model.BankAccount, id uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Find", bankAccount, id)
}

// Find indicates an expected call of Find.
func (mr *MockBankAccountRepositoryMockRecorder) Find(bankAccount, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBankAccountRepository)(nil).Find), bankAccount, id)
}

// FindByUserID mocks base method.
func (m *MockBankAccountRepository) FindByUserID(bankAccount *model.BankAccount, userID uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindByUserID", bankAccount, userID)
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockBankAccountRepositoryMockRecorder) FindByUserID(bankAccount, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockBankAccountRepository)(nil).FindByUserID), bankAccount, userID)
}

// Get mocks base method.
func (m *MockBankAccountRepository) Get(bankAccounts *[]model.BankAccount, userID uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", bankAccounts, userID)
}

// Get indicates an expected call of Get.
func (mr *MockBankAccountRepositoryMockRecorder) Get(bankAccounts, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBankAccountRepository)(nil).Get), bankAccounts, userID)
}

// Update mocks base method.
func (m *MockBankAccountRepository) Update(bankAccount *model.BankAccount, req *request.UpdateBankAccountRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", bankAccount, req)
}

// Update indicates an expected call of Update.
func (mr *MockBankAccountRepositoryMockRecorder) Update(bankAccount, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBankAccountRepository)(nil).Update), bankAccount, req)
}
