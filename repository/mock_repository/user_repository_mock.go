// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/user_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/andikabahari/eoplatform/model"
	request "github.com/andikabahari/eoplatform/request"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(user *model.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", user)
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), user)
}

// Find mocks base method.
func (m *MockUserRepository) Find(user *model.User, id uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Find", user, id)
}

// Find indicates an expected call of Find.
func (mr *MockUserRepositoryMockRecorder) Find(user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserRepository)(nil).Find), user, id)
}

// FindByUsername mocks base method.
func (m *MockUserRepository) FindByUsername(user *model.User, username string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindByUsername", user, username)
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUserRepositoryMockRecorder) FindByUsername(user, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUserRepository)(nil).FindByUsername), user, username)
}

// ResetPassword mocks base method.
func (m *MockUserRepository) ResetPassword(user *model.User, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetPassword", user, password)
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserRepositoryMockRecorder) ResetPassword(user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserRepository)(nil).ResetPassword), user, password)
}

// Update mocks base method.
func (m *MockUserRepository) Update(user *model.User, req *request.UpdateUserRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", user, req)
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(user, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), user, req)
}
