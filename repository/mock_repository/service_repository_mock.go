// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/service_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/andikabahari/eoplatform/model"
	request "github.com/andikabahari/eoplatform/request"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceRepository is a mock of ServiceRepository interface.
type MockServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRepositoryMockRecorder
}

// MockServiceRepositoryMockRecorder is the mock recorder for MockServiceRepository.
type MockServiceRepositoryMockRecorder struct {
	mock *MockServiceRepository
}

// NewMockServiceRepository creates a new mock instance.
func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRepository) EXPECT() *MockServiceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServiceRepository) Create(service *model.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", service)
}

// Create indicates an expected call of Create.
func (mr *MockServiceRepositoryMockRecorder) Create(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceRepository)(nil).Create), service)
}

// Delete mocks base method.
func (m *MockServiceRepository) Delete(service *model.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", service)
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceRepositoryMockRecorder) Delete(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceRepository)(nil).Delete), service)
}

// Find mocks base method.
func (m *MockServiceRepository) Find(service *model.Service, id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Find", service, id)
}

// Find indicates an expected call of Find.
func (mr *MockServiceRepositoryMockRecorder) Find(service, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockServiceRepository)(nil).Find), service, id)
}

// Get mocks base method.
func (m *MockServiceRepository) Get(services *[]model.Service, keyword string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", services, keyword)
}

// Get indicates an expected call of Get.
func (mr *MockServiceRepositoryMockRecorder) Get(services, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceRepository)(nil).Get), services, keyword)
}

// Update mocks base method.
func (m *MockServiceRepository) Update(service *model.Service, req *request.UpdateServiceRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", service, req)
}

// Update indicates an expected call of Update.
func (mr *MockServiceRepositoryMockRecorder) Update(service, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceRepository)(nil).Update), service, req)
}
