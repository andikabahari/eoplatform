// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/feedback_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/andikabahari/eoplatform/model"
	gomock "github.com/golang/mock/gomock"
)

// MockFeedbackRepository is a mock of FeedbackRepository interface.
type MockFeedbackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackRepositoryMockRecorder
}

// MockFeedbackRepositoryMockRecorder is the mock recorder for MockFeedbackRepository.
type MockFeedbackRepositoryMockRecorder struct {
	mock *MockFeedbackRepository
}

// NewMockFeedbackRepository creates a new mock instance.
func NewMockFeedbackRepository(ctrl *gomock.Controller) *MockFeedbackRepository {
	mock := &MockFeedbackRepository{ctrl: ctrl}
	mock.recorder = &MockFeedbackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackRepository) EXPECT() *MockFeedbackRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFeedbackRepository) Create(feedback *model.Feedback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", feedback)
}

// Create indicates an expected call of Create.
func (mr *MockFeedbackRepositoryMockRecorder) Create(feedback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeedbackRepository)(nil).Create), feedback)
}

// Get mocks base method.
func (m *MockFeedbackRepository) Get(feedbacks *[]model.Feedback, toUserID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", feedbacks, toUserID)
}

// Get indicates an expected call of Get.
func (mr *MockFeedbackRepositoryMockRecorder) Get(feedbacks, toUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFeedbackRepository)(nil).Get), feedbacks, toUserID)
}

// GetFeedbacksCount mocks base method.
func (m *MockFeedbackRepository) GetFeedbacksCount(fromUserID, toUserID any) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedbacksCount", fromUserID, toUserID)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFeedbacksCount indicates an expected call of GetFeedbacksCount.
func (mr *MockFeedbackRepositoryMockRecorder) GetFeedbacksCount(fromUserID, toUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbacksCount", reflect.TypeOf((*MockFeedbackRepository)(nil).GetFeedbacksCount), fromUserID, toUserID)
}

// GetOrdersCount mocks base method.
func (m *MockFeedbackRepository) GetOrdersCount(fromUserID, toUserID any) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersCount", fromUserID, toUserID)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetOrdersCount indicates an expected call of GetOrdersCount.
func (mr *MockFeedbackRepositoryMockRecorder) GetOrdersCount(fromUserID, toUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersCount", reflect.TypeOf((*MockFeedbackRepository)(nil).GetOrdersCount), fromUserID, toUserID)
}
